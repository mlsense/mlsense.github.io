<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on MlSense</title>
    <link>https://mlsense.github.io/tags/tutorial/</link>
    <description>Recent content in tutorial on MlSense</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mlsense.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vim/Vi editor shortcuts</title>
      <link>https://mlsense.github.io/posts/vim_shortcuts/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/vim_shortcuts/</guid>
      <description>Repetitive tasks should be done using as many shortcuts as possible. You are not doing anything new and hence not even an extra minute should be spent on doing the same. This post refers to the shortcuts that come in handy when working on the vi/vim editor.
This is not an exhaustive list. These are the ones I use frequently. Feel free to comment down your favorite shortcuts. Navigation keys  0 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Moves cursor to the start of the line $ &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Moves cursor to the end of the line w &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Moves forward one word b &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Moves backward one word</description>
    </item>
    
    <item>
      <title>Random Forest explained intuitively</title>
      <link>https://mlsense.github.io/posts/random_forest_explained_intuitively/</link>
      <pubDate>Tue, 18 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/random_forest_explained_intuitively/</guid>
      <description>Title: Random Forest explained intuitively date: 2016-10-18 8:00 comments: true slug: random_forest_explained_intuitively Category: ML, Data Science Tags: machine-learning, tutorial, manish barnwal description: This post explains random forest intuitively Keywords: random forest, random forest tutorial, data-science, manish barnwal
Random Forests algorithm has always fascinated me. I like how this algorithm can be easily explained to anyone without much hassle. One quick example, I use very frequently to explain the working of random forests is the way a company has multiple rounds of interview to hire a candidate.</description>
    </item>
    
    <item>
      <title>Improve runtime of Random Forest in R</title>
      <link>https://mlsense.github.io/posts/improve_runtime_random_forest_r/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/improve_runtime_random_forest_r/</guid>
      <description>There are two ways one can write the code to train a random forest model in R. Both the ways are listed below. A normal and frequent way of writing the command to train the random forest model is something like this. rfModel &amp;lt;- randomForest(Survived~. , data = trainSample[, -c(6, 8, 9)])  Notice the ~ sign. We call this the formula way of writing. Another way of writing the command to train the random forest model is shown below.</description>
    </item>
    
    <item>
      <title>How to install a package of a particular version in R</title>
      <link>https://mlsense.github.io/posts/install_a_package_particular_version_in_r/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/install_a_package_particular_version_in_r/</guid>
      <description>I recently tried installing caret package in R using install.packages(&amp;lsquo;caret&amp;rsquo;, dependencies=T) 
Normally this installation of package works and I continue to work with the functions associated with the package. When I tried including the package using library(caret) 
I got the following error.
Error in loadNamespace(j  R was not able to install this dependency package- pbkrtest. So I tried installing it separately, again using install.package(&amp;lsquo;pbkrtest&amp;rsquo;, dependencies=T)</description>
    </item>
    
    <item>
      <title>Shell commands come in handy for a data scientist</title>
      <link>https://mlsense.github.io/posts/shell_commands_for_data_scientist/</link>
      <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/shell_commands_for_data_scientist/</guid>
      <description>I am no expert of shell commands. I have been using them for quite some time and thought I give an attempt to list down the most common commands. I am writing these mostly from the perspective of a data-science guy. Let us get started. I will use the file- ‘data.txt’ to illustrate these commands. ‘data.txt’ is a file having 200 rows and 8 columns. You can access the data here.</description>
    </item>
    
    <item>
      <title>ROC and AUC - The three lettered acronyms</title>
      <link>https://mlsense.github.io/posts/roc_and_auc_three_letter_acronym/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/roc_and_auc_three_letter_acronym/</guid>
      <description>Confession time I don&amp;rsquo;t feel bad to confess this that ROC curve, AUC, True-positive and related terms took quite some time for me to understand. If today I contemplate on the reasons why I found this topic confusing. The first would be there are not many resources that explains intuitively what these mean. They just jump to the terms and the mathematical formula for them. The second being I had not used them even in my project work.</description>
    </item>
    
    <item>
      <title>Hadoop Streaming</title>
      <link>https://mlsense.github.io/posts/hadoop_streaming/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/hadoop_streaming/</guid>
      <description>A few days ago, I had written a post on The Big Data Problem{:target=&amp;rdquo;_blank&amp;rdquo;} which attempted to understand why we need big data and what the fuss is all about. You may want to read it here{:target=&amp;rdquo;_blank&amp;rdquo;}. Having understood why we need big data, let’s understand how we can go about analyzing the same. What is the way out to do analysis on big data? The solution is Streaming…Hadoop Streaming.</description>
    </item>
    
    <item>
      <title>The Big Data Problem</title>
      <link>https://mlsense.github.io/posts/big_data_problem/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mlsense.github.io/posts/big_data_problem/</guid>
      <description>Big data has become a sensation these days. Anyone and everyone wants to use this in their discussions. When I was still in my college and preparing for campus placements, I had attended almost all the pre-placement talks that companies gave to its prospective candidates. American Express was one such company that had talked extensively about big data and hadoop in their presentation. I remember clearly, the blank faces that all of us had.</description>
    </item>
    
  </channel>
</rss>